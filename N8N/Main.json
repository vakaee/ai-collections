{
  "name": "Peter S",
  "nodes": [
    {
      "parameters": {},
      "id": "8c77ef4c-dc5b-47bd-9a2f-de14a16221bd",
      "name": "Every 30 Minutes1",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        3968,
        144
      ]
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1VfXSEsJIGLNfs1kFAZWh3hlDXBXvZ6i3ZAGnV-iGZwA",
          "mode": "list",
          "cachedResultName": "BCS_Debtors_Template",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1VfXSEsJIGLNfs1kFAZWh3hlDXBXvZ6i3ZAGnV-iGZwA/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1813436853,
          "mode": "list",
          "cachedResultName": "BCS_Debtors_Template.csv",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1VfXSEsJIGLNfs1kFAZWh3hlDXBXvZ6i3ZAGnV-iGZwA/edit#gid=1813436853"
        },
        "options": {}
      },
      "id": "66019752-a5eb-4e64-96e8-df1e22177334",
      "name": "Read BCS Debtors1",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 3,
      "position": [
        4416,
        144
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "TRnq8nNPjHBRDGiO",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n  const now = new Date();\n\n  const BUSINESS_HOURS = {\n    AEST: { weekday: { start: 7, end: 21 }, weekend: { start: 9, end: 21 } },\n    ACST: { weekday: { start: 7, end: 21 }, weekend: { start: 9, end: 21 } },\n    AWST: { weekday: { start: 7, end: 21 }, weekend: { start: 9, end: 21 } }\n  };\n\n  const TIMEZONE_OFFSETS = {\n    AEST: 10,\n    ACST: 9.5,\n    AWST: 8\n  };\n\n  function isBusinessHours(timezone) {\n    const offset = TIMEZONE_OFFSETS[timezone] || 10;\n    const localTime = new Date(now.getTime() + offset * 3600000);\n    const hour = localTime.getHours() + localTime.getMinutes() / 60;\n    const day = localTime.getDay();\n    const isWeekend = day === 0 || day === 6;\n\n    const hours = BUSINESS_HOURS[timezone] || BUSINESS_HOURS.AEST;\n    const schedule = isWeekend ? hours.weekend : hours.weekday;\n\n    return hour >= schedule.start && hour < schedule.end;\n  }\n\n  const results = items.map(item => {\n    const data = item.json;\n    const checks = {\n      name: data.name,\n      currentTime: now.toString(),\n      checks: []\n    };\n\n    // Check 1\n    if (data.assigned_to_ai !== 'TRUE' && data.assigned_to_ai !== true) {\n      checks.checks.push({ test: 'assigned_to_ai', result: 'FAIL', value: data.assigned_to_ai });\n      checks.finalResult = 'REJECTED';\n      return { json: checks };\n    }\n    checks.checks.push({ test: 'assigned_to_ai', result: 'PASS', value: data.assigned_to_ai });\n\n    // Check 2\n    if (data.payment_status !== 'unpaid') {\n      checks.checks.push({ test: 'payment_status', result: 'FAIL', value: data.payment_status });\n      checks.finalResult = 'REJECTED';\n      return { json: checks };\n    }\n    checks.checks.push({ test: 'payment_status', result: 'PASS', value: data.payment_status });\n\n    // Check 3\n    if (data.call_status === 'calling') {\n      checks.checks.push({ test: 'call_status', result: 'FAIL', value: data.call_status });\n      checks.finalResult = 'REJECTED';\n      return { json: checks };\n    }\n    checks.checks.push({ test: 'call_status', result: 'PASS', value: data.call_status });\n\n    // Check 4\n    if (data.do_not_call === 'TRUE' || data.do_not_call === true) {\n      checks.checks.push({ test: 'do_not_call', result: 'FAIL', value: data.do_not_call });\n      checks.finalResult = 'REJECTED';\n      return { json: checks };\n    }\n    checks.checks.push({ test: 'do_not_call', result: 'PASS', value: data.do_not_call });\n\n    // Check 5\n    const attemptNumber = parseInt(data.attempt_number) || 1;\n    if (attemptNumber > 3) {\n      checks.checks.push({ test: 'attempt_number', result: 'FAIL', value: attemptNumber });\n      checks.finalResult = 'REJECTED';\n      return { json: checks };\n    }\n    checks.checks.push({ test: 'attempt_number', result: 'PASS', value: attemptNumber });\n\n    // Check 6\n    if (data.next_call_date) {\n      const nextCallDate = new Date(data.next_call_date);\n      if (!isNaN(nextCallDate.getTime()) && nextCallDate > now) {\n        checks.checks.push({\n          test: 'next_call_date',\n          result: 'FAIL',\n          nextCallDate: nextCallDate.toString(),\n          currentTime: now.toString()\n        });\n        checks.finalResult = 'REJECTED';\n        return { json: checks };\n      }\n    }\n    checks.checks.push({ test: 'next_call_date', result: 'PASS' });\n\n    // Check 7\n    const timezone = data.timezone || 'AEST';\n    const offset = TIMEZONE_OFFSETS[timezone] || 10;\n    const localTime = new Date(now.getTime() + offset * 3600000);\n\n    if(!isBusinessHours(timezone)) {\n      checks.checks.push({\n        test: 'business_hours',\n        result: 'FAIL',\n        timezone: timezone,\n        localTime: localTime.toString()\n      });\n      checks.finalResult = 'REJECTED';\n      return { json: checks };\n    }\n    checks.checks.push({ test: 'business_hours', result: 'PASS', localTime: localTime.toString() });\n\n    // Check 8\n    if(parseInt(data.total_attempts) > 8) {\n      checks.checks.push({ test: 'total_attempts', result: 'FAIL', value: data.total_attempts });\n      checks.finalResult = 'REJECTED';\n      return { json: checks };\n    }\n    checks.checks.push({ test: 'total_attempts', result: 'PASS', value: data.total_attempts });\n\n    // All checks passed\n    checks.finalResult = 'ACCEPTED';\n    checks.originalData = data;\n    return { json: checks };\n  });\n\n  return results;"
      },
      "id": "88c52eed-897d-4f95-b53a-d51309678eb2",
      "name": "Filter & Validate1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4640,
        144
      ]
    },
    {
      "parameters": {
        "jsCode": "// Normalize Phone & Prepare Vapi Variables\n\n  // Get config from Set node (change 'Set' to your actual node name if different)\n  const config = $('Set').first().json;\nconst VAPI_API_KEY=config.VAPI_API_KEY;\n\n  // Get debtor data\n  // Get debtor data - REFERENCE THE CORRECT NODE\n  const data = $('Read BCS Debtors1').first().json;  \n\n  // Phone normalization function\n  function normalizePhone(phone) {\n    if (!phone) return null;\n\n    let cleaned = phone.toString().replace(/[\\s\\-\\(\\)\\.\\+]/g, '');\n\n    // Case 1: Already has country code (11+ digits, no leading 0)\n    if (cleaned.length >= 11 && !cleaned.startsWith('0')) {\n      if (cleaned.startsWith('61')) {\n        return '+' + cleaned;\n      }\n      if (cleaned.startsWith('1') && cleaned.length === 11) {\n        return '+' + cleaned;\n      }\n      if (cleaned.startsWith('44')) {\n        return '+' + cleaned;\n      }\n      if (cleaned.length >= 11 && cleaned.length <= 15) {\n        return '+' + cleaned;\n      }\n    }\n\n    // Case 2: Australian local format (starts with 0, exactly 10 digits)\n    if (cleaned.startsWith('0') && cleaned.length === 10) {\n      return '+61' + cleaned.substring(1);\n    }\n\n    // Case 3: North American (exactly 10 digits, does NOT start with 0)\n    if (cleaned.length === 10 && !cleaned.startsWith('0')) {\n      return '+1' + cleaned;\n    }\n\n    // Case 4: Ambiguous\n    if (cleaned.length >= 7 && cleaned.length <= 9) {\n      throw new Error(`Ambiguous phone number: ${phone}. Please include country code.`);\n    }\n\n    throw new Error(`Invalid phone number: ${phone}. Got ${cleaned.length} digits: ${cleaned}`);\n  }\n\n  // Assistant selection\n  const debtorType = (data.debtor_type || 'consumer').toLowerCase();\n  const attemptNumber = parseInt(data.attempt_number) || 1;\n\n  const assistantMap = {\n    'consumer_1': config.VAPI_CONSUMER_1,\n    'consumer_2': config.VAPI_CONSUMER_2,\n    'consumer_3': config.VAPI_CONSUMER_3,\n    'commercial_1': config.VAPI_COMMERCIAL_1,\n    'commercial_2': config.VAPI_COMMERCIAL_2,\n    'commercial_3': config.VAPI_COMMERCIAL_3\n  };\n\n  const assistantKey = `${debtorType}_${attemptNumber}`;\n  const assistantId = assistantMap[assistantKey];\n\n  if (!assistantId) {\n    throw new Error(`No assistant found for ${assistantKey}. Check Set node has VAPI_CONSUMER_1, etc.`);\n  }\n\n  // Prepare Vapi call payload\n  return {\n    vapi_api_key: VAPI_API_KEY,\n    debtor_id: data.debtor_id,\n    row_number: data.row_number,\n    phone_normalized: normalizePhone(data.phone),\n    phone_original: data.phone,\n    assistant_id: assistantId,\n    vapi_payload: {\n      assistantId: assistantId,\n      customer: {\n        number: normalizePhone(data.phone)\n      },\n      phoneNumberId: config.VAPI_PHONE_NUMBER_ID,\n      assistantOverrides: {\n        variableValues: {\n          debtor_id: data.debtor_id.toString(),\n          debtor_name: data.name,\n          amount: data.amount.toString(),\n          creditor: data.creditor,\n          invoice_number: data.invoice_number,\n          dob: data.dob || '',\n          abn: data.abn || '',\n          attempt_number: attemptNumber.toString(),\n          collection_agency: config.COLLECTION_AGENCY || 'Brodie Collection Services',\n          bcs_phone_number: config.BCS_PHONE_NUMBER,\n          stripe_payment_link: config.STRIPE_PAYMENT_LINK,\n          bcs_mailing_address: config.BCS_MAILING_ADDRESS,\n          agent_name: config.AGENT_NAME || 'Sarah',\n          Bank_name: config.BANK_NAME || 'Commonwealth Bank',\n          BSB: config.BSB_NUMBER,\n          Account_Number: config.ACCOUNT_NUMBER\n        }\n      }\n    }\n  };"
      },
      "id": "741ca72e-3f11-44b3-91fd-cacc9f682cd4",
      "name": "Normalize Phone & Prepare Variables1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4864,
        144
      ]
    },
    {
      "parameters": {
        "jsCode": "// Display Test Results\nconst response = $input.item.json;\nconst statusCode = $input.item.statusCode || 0;\n\nconst testScenario = $node['Generate Test Payload1'].json.test_scenario;\n\nconsole.log('===== TEST WEBHOOK RESULTS =====');\nconsole.log(`Scenario: ${testScenario}`);\nconsole.log(`Status Code: ${statusCode}`);\nconsole.log(`Response:`, JSON.stringify(response, null, 2));\nconsole.log('===== END RESULTS =====');\n\nreturn {\n  test_scenario: testScenario,\n  status_code: statusCode,\n  success: statusCode >= 200 && statusCode < 300,\n  response: response\n};"
      },
      "id": "5efc63b8-6c5f-47e9-940e-9b1d709a5288",
      "name": "Display Results1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4880,
        1104
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.webhook_url }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Vapi-Signature",
              "value": "={{ $json.signature }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json.payload) }}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "ebe84780-00bb-42a7-a9b0-214fc60e0e81",
      "name": "Send to Vapi Handler1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4656,
        1104
      ]
    },
    {
      "parameters": {
        "jsCode": "// Generate Test Vapi Webhook Payload\n  // Uses Set node variables instead of environment variables\n\n  // Access variables from Set node (adjust node name if different)\n  const config = $node[\"Set1\"].json;\n  const secret = config.VAPI_WEBHOOK_SECRET;\n  const webhookUrl = config.WEBHOOK_VAPI_HANDLER;\n\n  // Test debtor data\n  const testDebtorId = 'TEST-001';\n  const testOutcome = 'READY_TO_PAY';\n  const testPaymentMethod = 'credit_card';\n\n  // Build mock Vapi webhook payload\n  const payload = {\n    message: {\n      type: 'end-of-call-report',\n      call: {\n        id: `test-call-${Date.now()}`,\n        status: 'ended',\n        endedReason: 'assistant-ended-call',\n        assistantOverrides: {\n          variableValues: {\n            debtor_id: testDebtorId,\n            debtor_name: 'Test Debtor',\n            amount: '1500.00',\n            creditor: 'Test Creditor Pty Ltd',\n            invoice_number: 'INV-TEST-001',\n            attempt_number: '1'\n          }\n        }\n      },\n      artifact: {\n        messages: [\n          {\n            role: 'assistant',\n            message: 'Test call completed',\n            toolCalls: [\n              {\n                id: `tool-call-${Date.now()}`,\n                type: 'function',\n                function: {\n                  name: 'log_outcome',\n                  arguments: JSON.stringify({\n                    outcome: testOutcome,\n                    payment_method: testPaymentMethod,\n                    promised_date: null,\n                    notes: 'Test webhook - debtor ready to pay via credit card'\n                  })\n                }\n              }\n            ]\n          }\n        ],\n        recordingUrl: null,\n        transcript: 'Test transcript placeholder'\n      }\n    }\n  };\n\n  if (!secret) {\n    throw new Error('VAPI_WEBHOOK_SECRET not found in Set node');\n  }\n\n  if (!webhookUrl) {\n    throw new Error('WEBHOOK_VAPI_HANDLER not found in Set node');\n  }\n\n  // Return payload with authentication headers\n  return {\n    json: {\n      payload: payload,\n      webhook_url: webhookUrl,\n      test_scenario: `${testOutcome} - ${testPaymentMethod}`,\n      headers: {\n        'x-vapi-secret': secret,\n        'content-type': 'application/json'\n      }\n    }\n  };"
      },
      "id": "5de73391-15e3-42bc-b91f-00702f6252d4",
      "name": "Generate Test Payload1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4432,
        1104
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "vapi-handler",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "a3d62d1d-88f8-4c89-a855-67a3df1d867c",
      "name": "Webhook - Vapi End-of-Call1",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        3952,
        480
      ],
      "webhookId": "vapi-handler"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "id": "b5a629f0-f694-48ce-b373-3ee341197d7c",
      "name": "Respond to Webhook1",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        4176,
        576
      ]
    },
    {
      "parameters": {
        "jsCode": "// Verify Bearer Token from Vapi\n  // Get headers from the webhook trigger node (not from $input)\n\n  // Reference the webhook node by name\n  const webhookData = $('Webhook - Vapi End-of-Call1').first().json;\n  const headers = webhookData.headers || {};\n\n  // Log available headers for debugging\n  console.log('Headers found:', Object.keys(headers));\n\n  // Get secret from Set2 node\n  const setNode = $(\"Set2\").first();\n  const secret = setNode.json.VAPI_WEBHOOK_SECRET;\n\n  if (!secret) {\n    throw new Error('VAPI_WEBHOOK_SECRET not found in Set2 node');\n  }\n\n  // Get auth header (Vapi sends in x-vapi-secret)\n  const authHeader = headers['x-vapi-secret'] ||\n                     headers['X-Vapi-Secret'] ||\n                     headers['authorization'] ||\n                     null;\n\n  if (!authHeader) {\n    console.log('Available headers:', Object.keys(headers));\n    throw new Error('Missing authentication header from Vapi webhook');\n  }\n\n  // Remove \"Bearer \" prefix if present\n  const receivedSecret = authHeader.replace(/^Bearer\\s+/i, '').trim();\n\n  // Compare secrets\n  if (receivedSecret !== secret) {\n    console.log('Expected secret (first 10 chars):', secret.substring(0, 10));\n    console.log('Received secret (first 10 chars):', receivedSecret.substring(0, 10));\n    throw new Error('Invalid webhook authentication - token mismatch');\n  }\n\n  console.log('Webhook authentication successful');\n\n  // Pass through the webhook body data (not headers)\n  return webhookData.body || webhookData;"
      },
      "id": "990e4c73-c96e-43c2-b4f0-2c6a3b2b4cfe",
      "name": "Verify Signature1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4400,
        384
      ]
    },
    {
      "parameters": {
        "jsCode": "// Parse Call Data from Webhook\n  // Based on WORKFLOW_ADAPTATION_PLAN.md Section 4.3 with FIX #2 and #7 applied\n\n  // FIX #2: Updated webhook payload parsing based on Vapi docs verification\n  const message = $input.first().json.message;\n\n  // Only process end-of-call-report events, ignore others\n  if (message.type !== 'end-of-call-report') {\n    return []; // Return empty array to stop workflow for this event\n  }\n\n  const call = message.call;\n  const artifact = message.artifact || {};\n  console.log(artifact);\n  const endedReason = message.endedReason;\n\n  // Extract debtor_id from assistant overrides (stored in call object)\n  const debtorId = call.assistantOverrides?.variableValues?.debtor_id;\n\n  if (!debtorId) {\n    throw new Error('Missing debtor_id in webhook');\n  }\n\n  // Check if call succeeded or failed\n  const callStatus = call.status; // \"ended\" or \"failed\"\n\n  // Parse function call (log_outcome)\n  // NOTE: Vapi may send this in artifact.messages array - needs testing\n  let outcome = 'UNKNOWN';\n  let paymentMethod = 'none';\n  let notes = '';\n  let promisedDate = null;\n\n  if (callStatus === 'failed') {\n    // FIX #7: CALL_FAILED not in function enum - handle separately\n    outcome = 'CALL_FAILED';\n    notes = `Call failed: ${endedReason}`;\n  } else if (artifact.messages && artifact.messages.length > 0) {\n    // Search for log_outcome function call in messages\n    // Function calls may appear as toolCalls in message objects\n    let functionCallFound = false;\n\n    for (const msg of artifact.messages) {\n      if (msg.toolCalls && Array.isArray(msg.toolCalls)) {\n        for (const toolCall of msg.toolCalls) {\n          if (toolCall.function?.name === 'log_outcome') {\n            // Parse function arguments (may be string or object)\n            const args = typeof toolCall.function.arguments === 'string'\n              ? JSON.parse(toolCall.function.arguments)\n              : toolCall.function.arguments;\n\n            outcome = args.outcome || 'UNKNOWN';\n            paymentMethod = args.payment_method || 'none';\n            notes = args.notes || '';\n            promisedDate = args.promised_date || null;\n            functionCallFound = true;\n            break;\n          }\n        }\n        if (functionCallFound) break;\n      }\n    }\n\n    if (!functionCallFound) {\n      // No function call found = likely no answer, voicemail, or system error\n      outcome = 'NO_ANSWER';\n      notes = 'No outcome logged by assistant (check transcript)';\n    }\n  } else {\n    // No messages in artifact\n    outcome = 'NO_ANSWER';\n    notes = 'No conversation recorded';\n  }\n\n  return {\n    debtor_id: debtorId,\n    call_id: call.id,\n    call_status: callStatus,\n    recording_url: artifact.recording?.stereoUrl || call.recordingUrl || '',\n    transcript: artifact.transcript || '',\n    outcome: outcome,\n    payment_method: paymentMethod,\n    notes: notes,\n    promised_date: promisedDate,\n    call_duration: (() => {\n      if (!message.startedAt || !message.endedAt) return 0;\n\n      const start = new Date(message.startedAt).getTime();\n      const end = new Date(message.endedAt).getTime();\n\n      if (isNaN(start) || isNaN(end)) return 0;\n\n      return (end - start) / 1000; // duration in seconds\n    })(),\n  };"
      },
      "id": "67ee8eec-a86e-40fe-9099-a9f12ae0631b",
      "name": "Parse Call Data1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4624,
        384
      ]
    },
    {
      "parameters": {
        "jsCode": "// Calculate Next Action based on Outcome\n// Based on WORKFLOW_ADAPTATION_PLAN.md Section 4.4\n\nconst data = $input.first().json;\nconst outcome = data.outcome;\nconst promisedDate = data.promised_date;\nconst callBackDate = data.callback_date;\nconst now = new Date();\n\nlet nextAction = null;\nlet nextCallDate = null;\nlet assignedToAi = true;\nlet paymentStatus = 'unpaid';\nlet doNotCall = false;\n\nfunction addDays(date, days) {\n  const result = new Date(date);\n  result.setDate(result.getDate() + days);\n  return result;\n}\n\nfunction addHours(date, hours) {\n  const result = new Date(date);\n  result.setHours(result.getHours() + hours);\n  return result;\n}\n\nswitch(outcome) {\n  case 'PROMISE_TO_PAY':\n    nextAction = 'SCHEDULE_CALL';\n    if (promisedDate) {\n      // Follow up day after promised date\n      nextCallDate = addDays(new Date(promisedDate), 1);\n    } else {\n      // Default: follow up in 7 days\n      nextCallDate = addDays(now, 7);\n    }\n    break;\n\n  case 'READY_TO_PAY':\n    nextAction = 'AWAIT_PAYMENT';\n    // Payment instructions provided verbally during call\n    // Schedule follow-up in 3 days to confirm payment received\n    nextCallDate = addDays(now, 3);\n    assignedToAi = false;\n    break;\n\n  case 'NO_ANSWER':\n      nextAction = 'SCHEDULE_CALL';\n      nextCallDate = addHours(now, 2); // Retry in 2 hours\n      break;\n\n  case 'VOICEMAIL':\n    nextAction = 'SCHEDULE_CALL';\n    nextCallDate = addHours(now, 2); // Retry in 4 hours\n    break;\n\n  case 'WRONG_NUMBER':\n    nextAction = 'MANUAL_REVIEW';\n    assignedToAi = false;\n    break;\n\n  case 'DISPUTE_RAISED':\n      nextAction = 'MANUAL_REVIEW';\n      assignedToAi = false;\n      break;\n\n  case 'HARDSHIP_CLAIMED':\n    nextAction = 'MANUAL_REVIEW';\n    assignedToAi = false;\n    break;\n\n  case 'REFUSED_TO_ENGAGE':\n    nextAction = 'SCHEDULE_CALL';\n    nextCallDate = addDays(now, 7); // Wait 1 week\n    break;\n\n  case 'REQUESTED_NO_CONTACT':\n    nextAction = 'MANUAL_REVIEW';\n    assignedToAi = false;\n    doNotCall = true;\n    break;\n\n  case 'ALREADY_PAID':\n    paymentStatus = 'paid';\n    nextAction = 'CLOSE_ACCOUNT';\n    assignedToAi = false;\n    break;\n\n  case 'CALL_FAILED':\n    nextAction = 'SCHEDULE_CALL';\n    nextCallDate = addHours(now, 2); // Retry in 2 hours\n    break;\n\n  case 'OBJECTED_TO_RECORDING':\n    nextAction = 'MANUAL_REVIEW';\n    assignedToAi = false;\n    break;\n\n  case 'PAYMENT_PLAN_REQUESTED':\n    nextAction = 'MANUAL_REVIEW'; // human approval required\n    assignedToAi = false;\n    break;\n\n  case 'PAYMENT_RECEIVED':\n    nextAction = 'CLOSE_ACCOUNT'; // payment confirmed, close account\n    paymentStatus = 'paid';\n    assignedToAi = false;\n    break;\n\n  case 'DECEASED':\n    nextAction = 'CLOSE_ACCOUNT'; // cease contact immediately\n    assignedToAi = false;\n    doNotCall = true;\n    break;\n\n  case 'CALLBACK_REQUESTED':\n    nextAction = 'SCHEDULE_CALL'; // follow up at requested time\n    if (callBackDate) {\n      // Follow up day after promised date\n      nextCallDate = new Date(callBackDate);\n    } else {\n      // Default: follow up in 2 hours\n      nextCallDate = addHours(now, 2);\n    }    \n    break;\n\n  case 'HUNG_UP':\n    nextAction = 'SCHEDULE_CALL'; // retry next business day\n    nextCallDate = addDays(now, 1);\n    break;\n\n  case 'ESCALATE_TO_HUMAN':\n    nextAction = 'MANUAL_REVIEW'; // complex issue, needs human\n    assignedToAi = false;\n    break;\n\n  case 'CEASE_CONTACT_REQUESTED':\n    nextAction = 'MANUAL_REVIEW'; // cease calls, written contact only\n    assignedToAi = false;\n    doNotCall = true;\n    break;\n\n  case 'LEGAL_REPRESENTATION':\n    nextAction = 'MANUAL_REVIEW'; // contact lawyer, stop debtor contact\n    assignedToAi = false;\n    doNotCall = true;\n    break;\n\n  case 'COMPLAINT_THREATENED':\n    nextAction = 'MANUAL_REVIEW'; // escalate to supervisor\n    assignedToAi = false;\n    break;\n\n  case 'AMOUNT_DISPUTED':\n    nextAction = 'MANUAL_REVIEW'; // handle as dispute, pause collection\n    assignedToAi = false;\n    break;\n\n  case 'ABUSIVE_DEBTOR':\n    nextAction = 'MANUAL_REVIEW'; // flag for review, may cease contact\n    assignedToAi = false;\n    break;\n\n  case 'BANKRUPTCY_DECLARED':\n    nextAction = 'CLOSE_ACCOUNT'; // cease collection, contact trustee\n    assignedToAi = false;\n    doNotCall = true;\n    break;\n    \n  default:\n    nextAction = 'MANUAL_REVIEW';\n    assignedToAi = false;\n}\n\nreturn {\n  ...data,\n  next_action: nextAction,\n  next_call_date: nextCallDate ? nextCallDate.toISOString() : '',\n  assigned_to_ai: assignedToAi,\n  payment_status: paymentStatus,\n  do_not_call: doNotCall\n};"
      },
      "id": "068e581b-4eae-4631-bfcc-08139b5c9d27",
      "name": "Calculate Next Action1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4848,
        384
      ]
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1VfXSEsJIGLNfs1kFAZWh3hlDXBXvZ6i3ZAGnV-iGZwA",
          "mode": "list",
          "cachedResultName": "BCS_Debtors_Template",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1VfXSEsJIGLNfs1kFAZWh3hlDXBXvZ6i3ZAGnV-iGZwA/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1813436853,
          "mode": "list",
          "cachedResultName": "BCS_Debtors_Template.csv",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1VfXSEsJIGLNfs1kFAZWh3hlDXBXvZ6i3ZAGnV-iGZwA/edit#gid=1813436853"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "debtor_id",
              "lookupValue": "={{$node['Parse Call Data1'].json.debtor_id}}"
            }
          ]
        },
        "options": {}
      },
      "id": "5dec79f9-e1e3-4383-82cf-7ab627e5ec5d",
      "name": "Lookup Debtor Row1",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 3,
      "position": [
        5072,
        384
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "TRnq8nNPjHBRDGiO",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Prepare Update Data\n// Based on WORKFLOW_ADAPTATION_PLAN.md Section 4.6\n\nconst parsed = $('Calculate Next Action1').first().json;\nconst currentRow = $('Lookup Debtor Row1').first().json;\n\nconst currentAttempt = parseInt(currentRow.attempt_number) || 1;\nconst newAttempt = currentAttempt + 1;\nconst total_attempts = parseInt(currentRow.total_attempts) || 0;\nconst newTotalAttempts = total_attempts + 1;\n\nconst timestamp = new Date().toLocaleString('en-AU', { timeZone: 'Australia/Sydney' });\nconst newNotes = `${currentRow.notes || ''}\\n[${timestamp}] Attempt ${currentAttempt}: ${parsed.outcome} - ${parsed.notes}`.trim();\n\nreturn {\n  row_number: currentRow.__rowNum__, // n8n provides this\n  call_status: 'completed',\n  call_id: parsed.call_id,\n  recording_url: parsed.recording_url,\n  last_call_date: new Date().toISOString(),\n  last_outcome: parsed.outcome,\n  next_action: parsed.next_action,\n  next_call_date: parsed.next_call_date,\n  attempt_number: newAttempt,\n  notes: newNotes,\n  assigned_to_ai: parsed.assigned_to_ai,\n  payment_status: parsed.payment_status,\n  do_not_call: parsed.do_not_call,\n  payment_method: parsed.payment_method,\n  debtor_id: parsed.debtor_id,\n  total_attempts: newTotalAttempts\n};"
      },
      "id": "fb6f2130-4f7c-43ae-90f3-59a2c2a56e5b",
      "name": "Prepare Update Data1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5296,
        384
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1VfXSEsJIGLNfs1kFAZWh3hlDXBXvZ6i3ZAGnV-iGZwA",
          "mode": "list",
          "cachedResultName": "BCS_Debtors_Template",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1VfXSEsJIGLNfs1kFAZWh3hlDXBXvZ6i3ZAGnV-iGZwA/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1813436853,
          "mode": "list",
          "cachedResultName": "BCS_Debtors_Template.csv",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1VfXSEsJIGLNfs1kFAZWh3hlDXBXvZ6i3ZAGnV-iGZwA/edit#gid=1813436853"
        },
        "columnToMatchOn": "debtor_id",
        "valueToMatchOn": "={{ $json.debtor_id }}",
        "fieldsUi": {
          "values": [
            {
              "column": "call_status",
              "fieldValue": "={{$node['Prepare Update Data1'].json.call_status}}"
            },
            {
              "column": "call_id",
              "fieldValue": "={{$node['Prepare Update Data1'].json.call_id}}"
            },
            {
              "column": "last_call_date",
              "fieldValue": "={{$node['Prepare Update Data1'].json.last_call_date}}"
            },
            {
              "column": "last_outcome",
              "fieldValue": "={{$node['Prepare Update Data1'].json.last_outcome}}"
            },
            {
              "column": "next_action",
              "fieldValue": "={{$node['Prepare Update Data1'].json.next_action}}"
            },
            {
              "column": "next_call_date",
              "fieldValue": "={{$node['Prepare Update Data1'].json.next_call_date}}"
            },
            {
              "column": "attempt_number",
              "fieldValue": "={{$node['Prepare Update Data1'].json.attempt_number}}"
            },
            {
              "column": "notes",
              "fieldValue": "={{$node['Prepare Update Data1'].json.notes}}"
            },
            {
              "column": "assigned_to_ai",
              "fieldValue": "={{$node['Prepare Update Data1'].json.assigned_to_ai}}"
            },
            {
              "column": "payment_status",
              "fieldValue": "={{$node['Prepare Update Data1'].json.payment_status}}"
            },
            {
              "column": "do_not_call",
              "fieldValue": "={{$node['Prepare Update Data1'].json.do_not_call}}"
            },
            {
              "column": "recording_url",
              "fieldValue": "={{$node['Prepare Update Data1'].json.recording_url}}"
            },
            {
              "column": "total_attempts",
              "fieldValue": "={{$node['Prepare Update Data1'].json.total_attempts}}"
            }
          ]
        },
        "options": {}
      },
      "id": "83fa6ca0-d11f-471e-8f43-554db8258598",
      "name": "Update Debtor Row1",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 3,
      "position": [
        5520,
        384
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "TRnq8nNPjHBRDGiO",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "condition-003",
              "leftValue": "={{ $node['Calculate Next Action1'].json.next_action }}",
              "rightValue": "MANUAL_REVIEW",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "bec17c5a-6b23-4d4e-b6c0-ac14fb13b60c",
      "name": "IF - Manual Review Needed?1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        5744,
        384
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtMinute": 10
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        3984,
        1344
      ],
      "id": "53725b1a-5343-4643-b009-4e8633a2d90a",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1oRnYftPpebpPKlqUPDYUJZ79Y8sABqnVmRS32Klkn48",
          "mode": "list",
          "cachedResultName": "BCS_Debtors_Template",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1oRnYftPpebpPKlqUPDYUJZ79Y8sABqnVmRS32Klkn48/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1813436853,
          "mode": "list",
          "cachedResultName": "BCS_Debtors_Template.csv",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1oRnYftPpebpPKlqUPDYUJZ79Y8sABqnVmRS32Klkn48/edit#gid=1813436853"
        },
        "options": {}
      },
      "id": "c486239a-308d-4c35-9496-bd90d2ba0365",
      "name": "Read BCS Debtors To Reset Attempts",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 3,
      "position": [
        4208,
        1344
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "TRnq8nNPjHBRDGiO",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Reset Daily Attempts\n// Based on WORKFLOW_ADAPTATION_PLAN.md Section 3.7\n\nconst items = $input.all();\nconst now = new Date();\nconst today = now.toISOString().slice(0, 10); // YYYY-MM-DD format\n\nconst resetList = items\n  .filter(item => {\n    const data = item.json;\n\n    // Must be assigned to AI\n    if (data.assigned_to_ai !== 'TRUE' && data.assigned_to_ai !== true) return false;\n\n    // Must be unpaid\n    if (data.payment_status !== 'unpaid') return false;\n\n    // Must not be currently calling (duplicate prevention)\n    if (data.call_status === 'calling') return false;\n\n    // Must not be on do-not-call list\n    if (data.do_not_call === 'TRUE' || data.do_not_call === true) return false;\n\n    const attemptNumber = parseInt(data.attempt_number) || 0;\n    if (attemptNumber < 4) {\n      // Optional — uncomment to only reset those who reached 3 attempts\n      return false;\n    }\n    return true;\n  })\n  .map(item => {\n    const data = item.json;\n\n    return {\n      json: {\n        debtor_id: data.debtor_id,\n        attempt_number: 1, // reset to 1\n        last_reset_date: today,\n        reset_reason: 'Daily reset of attempt count',\n      },\n    };\n  });\n\nreturn resetList;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4432,
        1344
      ],
      "id": "31fa7d40-8ce3-4a7a-8984-97d42f1354f9",
      "name": "Filter Debtors"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        4656,
        1344
      ],
      "id": "0468d12f-2654-4c97-a1c5-b33ef2ed46b6",
      "name": "Loop Over Items"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "name": "Replace Me",
      "typeVersion": 1,
      "position": [
        5104,
        1344
      ],
      "id": "6102264f-3e39-4c95-8723-fb207b71a54f"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1oRnYftPpebpPKlqUPDYUJZ79Y8sABqnVmRS32Klkn48",
          "mode": "list",
          "cachedResultName": "BCS_Debtors_Template",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1oRnYftPpebpPKlqUPDYUJZ79Y8sABqnVmRS32Klkn48/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1813436853,
          "mode": "list",
          "cachedResultName": "BCS_Debtors_Template.csv",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1oRnYftPpebpPKlqUPDYUJZ79Y8sABqnVmRS32Klkn48/edit#gid=1813436853"
        },
        "columnToMatchOn": "debtor_id",
        "valueToMatchOn": "={{ $json.debtor_id }}",
        "fieldsUi": {
          "values": [
            {
              "column": "call_status",
              "fieldValue": "={{$node['Prepare Update Data1'].json.call_status}}"
            },
            {
              "column": "call_id",
              "fieldValue": "={{$node['Prepare Update Data1'].json.call_id}}"
            },
            {
              "column": "last_call_date",
              "fieldValue": "={{$node['Prepare Update Data1'].json.last_call_date}}"
            },
            {
              "column": "last_outcome",
              "fieldValue": "={{$node['Prepare Update Data1'].json.last_outcome}}"
            },
            {
              "column": "next_action",
              "fieldValue": "={{$node['Prepare Update Data1'].json.next_action}}"
            },
            {
              "column": "next_call_date",
              "fieldValue": "={{$node['Prepare Update Data1'].json.next_call_date}}"
            },
            {
              "column": "attempt_number",
              "fieldValue": "={{$node['Prepare Update Data1'].json.attempt_number}}"
            },
            {
              "column": "notes",
              "fieldValue": "={{$node['Prepare Update Data1'].json.notes}}"
            },
            {
              "column": "assigned_to_ai",
              "fieldValue": "={{$node['Prepare Update Data1'].json.assigned_to_ai}}"
            },
            {
              "column": "payment_status",
              "fieldValue": "={{$node['Prepare Update Data1'].json.payment_status}}"
            },
            {
              "column": "do_not_call",
              "fieldValue": "={{$node['Prepare Update Data1'].json.do_not_call}}"
            },
            {
              "column": "recording_url",
              "fieldValue": "={{$node['Prepare Update Data1'].json.recording_url}}"
            },
            {
              "column": "total_attempts",
              "fieldValue": "={{$node['Prepare Update Data1'].json.total_attempts}}"
            }
          ]
        },
        "options": {}
      },
      "id": "ba597c6f-528d-42ed-8fa2-1467ee107aea",
      "name": "Update Debtor Row",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 3,
      "position": [
        4912,
        1376
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "TRnq8nNPjHBRDGiO",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "634d3ae8-de86-49d3-bc88-b08ce66e01bf",
              "name": "VAPI_CONSUMER_1",
              "value": "dc002a25-f5ab-475a-b5dd-393e661c5fed",
              "type": "string"
            },
            {
              "id": "ec3df0a1-9ab9-4361-9946-26a6a5015f3f",
              "name": "VAPI_CONSUMER_2",
              "value": "5f38abd5-2500-4539-ac3f-7b9c7a22d9f1",
              "type": "string"
            },
            {
              "id": "5cb74afb-2c21-476a-82d9-50d3c9dd0abc",
              "name": "VAPI_CONSUMER_3",
              "value": "a783e4a2-68c8-43e6-8b69-9c32a9dbd681",
              "type": "string"
            },
            {
              "id": "22faee3e-e007-4eae-88b4-52b47ee1288a",
              "name": "VAPI_PHONE_NUMBER_ID",
              "value": "d9e58b20-0739-4c2f-8d90-50c86cc35ef9",
              "type": "string"
            },
            {
              "id": "6ebda54b-f5ae-477b-96b9-7e62e87e57f2",
              "name": "BCS_PHONE_NUMBER",
              "value": "+61412345678",
              "type": "string"
            },
            {
              "id": "992cfe59-9688-438f-9409-35b239facbc2",
              "name": "STRIPE_PAYMENT_LINK",
              "value": "",
              "type": "string"
            },
            {
              "id": "ebdb4c7f-a2b8-43bf-ad70-5a584ebe065b",
              "name": "BCS_MAILING_ADDRESS",
              "value": "Level 5, 123 Collins St, Melbourne VIC 3000",
              "type": "string"
            },
            {
              "id": "dd7270d1-bb9c-4e8f-a711-f311a9f2176a",
              "name": "BSB_NUMBER",
              "value": "062-000",
              "type": "string"
            },
            {
              "id": "5b356eb8-1897-40e5-8446-18e6ba85f635",
              "name": "ACCOUNT_NUMBER",
              "value": "12345678",
              "type": "string"
            },
            {
              "id": "60fe3ffd-5073-461e-87b4-4564830f4f1f",
              "name": "COLLECTION_AGENCY",
              "value": "Brodie Collection Services Pty Ltd",
              "type": "string"
            },
            {
              "id": "fc85a61b-f0b2-4682-8ac4-237e8c3a0540",
              "name": "AGENT_NAME",
              "value": "Sarah",
              "type": "string"
            },
            {
              "id": "f8dd04de-81bc-40f7-b040-e29092622210",
              "name": "BANK_NAME",
              "value": "Commonwealth Bank",
              "type": "string"
            },
            {
              "id": "5c498d2c-3ee7-493d-851f-f3c1a0273d36",
              "name": "VAPI_API_KEY",
              "value": "7dc13a80-ba46-4761-9b32-104ffbbf0a63",
              "type": "string"
            },
            {
              "id": "06318361-47c5-49bc-b238-6d86cff96463",
              "name": "VAPI_PHONE_NUMBER",
              "value": "+1 (320) 233 5566",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4192,
        144
      ],
      "id": "ea794624-0761-4c08-83ed-70ba3df9ad3c",
      "name": "Set"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        3984,
        1104
      ],
      "id": "811259a8-8d36-4763-902e-6af2266ee8e0",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "06318361-47c5-49bc-b238-6d86cff96463",
              "name": "VAPI_WEBHOOK_SECRET",
              "value": "mywebhooksecret123",
              "type": "string"
            },
            {
              "id": "9f13d9c5-8d2f-4c98-8dee-d23caa3c820b",
              "name": "WEBHOOK_VAPI_HANDLER",
              "value": "https://2d64a2ec2215.ngrok-free.app/webhook/vapi-handler",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4208,
        1104
      ],
      "id": "0b71edd3-dcb7-4d32-83dc-deb44cb4524e",
      "name": "Set1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "06318361-47c5-49bc-b238-6d86cff96463",
              "name": "VAPI_WEBHOOK_SECRET",
              "value": "mywebhooksecret123",
              "type": "string"
            },
            {
              "id": "9f13d9c5-8d2f-4c98-8dee-d23caa3c820b",
              "name": "WEBHOOK_VAPI_HANDLER",
              "value": "https://2d64a2ec2215.ngrok-free.app/webhook/vapi-handler",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4176,
        384
      ],
      "id": "53ce5d19-a327-42de-8e45-762cd7c02580",
      "name": "Set2"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "ukRc77KQcAOncaw8",
          "mode": "list",
          "cachedResultName": "Peter S: Make VAPI Call"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [
            "VAPI_API_KEY"
          ],
          "schema": [
            {
              "id": "VAPI_API_KEY",
              "displayName": "VAPI_API_KEY",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "mode": "each",
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        5088,
        144
      ],
      "id": "eeab65c9-36ab-483b-871f-c2dcc7734506",
      "name": "Execute Workflow"
    }
  ],
  "pinData": {},
  "connections": {
    "Every 30 Minutes1": {
      "main": [
        [
          {
            "node": "Set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read BCS Debtors1": {
      "main": [
        [
          {
            "node": "Filter & Validate1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter & Validate1": {
      "main": [
        [
          {
            "node": "Normalize Phone & Prepare Variables1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Phone & Prepare Variables1": {
      "main": [
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send to Vapi Handler1": {
      "main": [
        [
          {
            "node": "Display Results1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Test Payload1": {
      "main": [
        [
          {
            "node": "Send to Vapi Handler1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook - Vapi End-of-Call1": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Set2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verify Signature1": {
      "main": [
        [
          {
            "node": "Parse Call Data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Call Data1": {
      "main": [
        [
          {
            "node": "Calculate Next Action1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Next Action1": {
      "main": [
        [
          {
            "node": "Lookup Debtor Row1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lookup Debtor Row1": {
      "main": [
        [
          {
            "node": "Prepare Update Data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Update Data1": {
      "main": [
        [
          {
            "node": "Update Debtor Row1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Debtor Row1": {
      "main": [
        [
          {
            "node": "IF - Manual Review Needed?1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Read BCS Debtors To Reset Attempts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read BCS Debtors To Reset Attempts": {
      "main": [
        [
          {
            "node": "Filter Debtors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Debtors": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replace Me": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Update Debtor Row",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Debtor Row": {
      "main": [
        [
          {
            "node": "Replace Me",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set": {
      "main": [
        [
          {
            "node": "Read BCS Debtors1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Set1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set1": {
      "main": [
        [
          {
            "node": "Generate Test Payload1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set2": {
      "main": [
        [
          {
            "node": "Verify Signature1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "8ff3eaf0-dbc4-4dc5-84f2-815571732f47",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "15fdefe217dd497a3644ac7579dc52a8d91ba7b8a26ac0fbdc9f2ffe89ed0a93"
  },
  "id": "oth8PNNvhYCTz9cq",
  "tags": []
}