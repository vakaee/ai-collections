{
  "name": "BCS Call Scheduler",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 30
            }
          ]
        }
      },
      "id": "cron-trigger-001",
      "name": "Every 30 Minutes",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [0, 240]
    },
    {
      "parameters": {},
      "id": "manual-trigger-001",
      "name": "Manual Trigger (for testing)",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [0, 400]
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "={{ $vars.GOOGLE_SHEETS_SPREADSHEET_ID }}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "Sheet1",
          "mode": "name"
        },
        "options": {
          "range": "A2:W1000"
        }
      },
      "id": "sheets-read-001",
      "name": "Read BCS Debtors",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [240, 240],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "{{GOOGLE_SHEETS_CREDENTIAL_ID}}",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Filter & Validate Debtors\n// Based on WORKFLOW_ADAPTATION_PLAN.md Section 3.3 with all fixes applied\n\nconst items = $input.all();\nconst now = new Date();\n\n// Business hours configuration\nconst BUSINESS_HOURS = {\n  AEST: { weekday: { start: 7.5, end: 21 }, weekend: { start: 9, end: 21 } },\n  ACST: { weekday: { start: 7.5, end: 21 }, weekend: { start: 9, end: 21 } },\n  AWST: { weekday: { start: 7.5, end: 21 }, weekend: { start: 9, end: 21 } }\n};\n\n// Timezone offsets from UTC\nconst TIMEZONE_OFFSETS = {\n  AEST: 10,\n  ACST: 9.5,\n  AWST: 8\n};\n\nfunction isBusinessHours(timezone) {\n  const offset = TIMEZONE_OFFSETS[timezone] || 10; // Default AEST\n  const localTime = new Date(now.getTime() + offset * 3600000);\n  const hour = localTime.getHours() + localTime.getMinutes() / 60;\n  const day = localTime.getDay();\n  const isWeekend = day === 0 || day === 6;\n\n  const hours = BUSINESS_HOURS[timezone] || BUSINESS_HOURS.AEST;\n  const schedule = isWeekend ? hours.weekend : hours.weekday;\n\n  return hour >= schedule.start && hour < schedule.end;\n}\n\nconst filtered = items.filter(item => {\n  const data = item.json;\n\n  // Must be assigned to AI\n  if (data.assigned_to_ai !== 'TRUE' && data.assigned_to_ai !== true) return false;\n\n  // Must be unpaid\n  if (data.payment_status !== 'unpaid') return false;\n\n  // Must not be currently calling (duplicate prevention)\n  if (data.call_status === 'calling') return false;\n\n  // Must not be on do-not-call list\n  if (data.do_not_call === 'TRUE' || data.do_not_call === true) return false;\n\n  // Must have valid attempt number (1-3)\n  const attemptNumber = parseInt(data.attempt_number) || 1;\n  if (attemptNumber > 3) return false;\n\n  // Must be scheduled for now or past\n  if (data.next_call_date) {\n    const nextCallDate = new Date(data.next_call_date);\n    if (nextCallDate > now) return false;\n  }\n\n  // Must be within business hours for debtor's timezone\n  const timezone = data.timezone || 'AEST';\n  if (!isBusinessHours(timezone)) return false;\n\n  return true;\n});\n\nreturn filtered;"
      },
      "id": "code-filter-001",
      "name": "Filter & Validate",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [480, 240]
    },
    {
      "parameters": {},
      "id": "split-items-001",
      "name": "Split Into Items",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [720, 240],
      "alwaysOutputData": false,
      "oncePerBatch": false
    },
    {
      "parameters": {
        "jsCode": "// Normalize Phone & Prepare Vapi Variables\n// Based on WORKFLOW_ADAPTATION_PLAN.md Section 3.5 with FIX #1 and #3 applied\n\nconst data = $input.item.json;\n\n// Phone normalization function (robust E.164 conversion)\nfunction normalizePhone(phone) {\n  if (!phone) return null;\n\n  // Remove spaces, dashes, parentheses\n  let cleaned = phone.toString().replace(/[\\s\\-\\(\\)]/g, '');\n\n  // Convert Australian 04xx to +614xx\n  if (cleaned.startsWith('04')) {\n    cleaned = '+61' + cleaned.substring(1);\n  }\n\n  // Convert Australian 61 to +61\n  if (cleaned.startsWith('61') && !cleaned.startsWith('+')) {\n    cleaned = '+' + cleaned;\n  }\n\n  // Add + if missing (assume Australian)\n  if (!cleaned.startsWith('+')) {\n    cleaned = '+61' + cleaned;\n  }\n\n  return cleaned;\n}\n\n// Assistant selection (6 assistants based on debtor type and attempt number)\nconst debtorType = (data.debtor_type || 'consumer').toLowerCase();\nconst attemptNumber = parseInt(data.attempt_number) || 1;\n\nconst assistantMap = {\n  'consumer_1': $vars.VAPI_CONSUMER_1,\n  'consumer_2': $vars.VAPI_CONSUMER_2,\n  'consumer_3': $vars.VAPI_CONSUMER_3,\n  'commercial_1': $vars.VAPI_COMMERCIAL_1,\n  'commercial_2': $vars.VAPI_COMMERCIAL_2,\n  'commercial_3': $vars.VAPI_COMMERCIAL_3\n};\n\nconst assistantKey = `${debtorType}_${attemptNumber}`;\nconst assistantId = assistantMap[assistantKey];\n\nif (!assistantId) {\n  throw new Error(`No assistant found for ${assistantKey}`);\n}\n\n// Prepare Vapi call payload\nreturn {\n  debtor_id: data.debtor_id,\n  row_number: data.__rowNum__, // FIX #1: Use n8n's built-in row number (survives filtering)\n  phone_normalized: normalizePhone(data.phone),\n  phone_original: data.phone,\n  assistant_id: assistantId,\n  vapi_payload: {\n    assistantId: assistantId,\n    customer: {\n      number: normalizePhone(data.phone)\n    },\n    phoneNumberId: $vars.VAPI_PHONE_NUMBER_ID, // FIX #3: Use ID not phone number\n    assistantOverrides: {\n      variableValues: {\n        debtor_id: data.debtor_id.toString(),\n        debtor_name: data.name,\n        amount: data.amount.toString(),\n        creditor: data.creditor,\n        invoice_number: data.invoice_number,\n        dob: data.dob || '',\n        abn: data.abn || '',\n        attempt_number: attemptNumber.toString()\n      }\n    }\n  }\n};"
      },
      "id": "code-prepare-001",
      "name": "Normalize Phone & Prepare Variables",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [960, 240]
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "={{ $vars.GOOGLE_SHEETS_SPREADSHEET_ID }}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "Sheet1",
          "mode": "name"
        },
        "operation": "update",
        "dataMode": "autoMapInputData",
        "options": {
          "dataStartRow": "={{ $json.row_number }}",
          "rawData": true
        },
        "columnsUi": {
          "columnValues": [
            {
              "column": "call_status",
              "value": "calling"
            }
          ]
        }
      },
      "id": "sheets-update-001",
      "name": "Set call_status = calling",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [1200, 240],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "{{GOOGLE_SHEETS_CREDENTIAL_ID}}",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.vapi.ai/call/phone",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $vars.VAPI_API_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($node['Normalize Phone & Prepare Variables'].json.vapi_payload) }}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "http-vapi-001",
      "name": "Call Vapi API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1440, 240]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-001",
              "leftValue": "={{ $json.id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "if-success-001",
      "name": "IF - Call Successful?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1680, 240]
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "={{ $vars.GOOGLE_SHEETS_SPREADSHEET_ID }}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "Sheet1",
          "mode": "name"
        },
        "operation": "update",
        "dataMode": "autoMapInputData",
        "options": {
          "dataStartRow": "={{ $node['Normalize Phone & Prepare Variables'].json.row_number }}",
          "rawData": true
        },
        "columnsUi": {
          "columnValues": [
            {
              "column": "call_status",
              "value": ""
            },
            {
              "column": "notes",
              "value": "={{ $node['Normalize Phone & Prepare Variables'].json.notes || '' }}\\n[{{ $now.toISO() }}] Vapi call failed: {{ $json.error || 'Unknown error' }}"
            }
          ]
        }
      },
      "id": "sheets-reset-001",
      "name": "Reset call_status (on error)",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [1920, 400],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "{{GOOGLE_SHEETS_CREDENTIAL_ID}}",
          "name": "Google Sheets account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Every 30 Minutes": {
      "main": [
        [
          {
            "node": "Read BCS Debtors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Manual Trigger (for testing)": {
      "main": [
        [
          {
            "node": "Read BCS Debtors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read BCS Debtors": {
      "main": [
        [
          {
            "node": "Filter & Validate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter & Validate": {
      "main": [
        [
          {
            "node": "Split Into Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Into Items": {
      "main": [
        [
          {
            "node": "Normalize Phone & Prepare Variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Phone & Prepare Variables": {
      "main": [
        [
          {
            "node": "Set call_status = calling",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set call_status = calling": {
      "main": [
        [
          {
            "node": "Call Vapi API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Vapi API": {
      "main": [
        [
          {
            "node": "IF - Call Successful?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF - Call Successful?": {
      "main": [
        [
          null
        ],
        [
          {
            "node": "Reset call_status (on error)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "bcs-call-scheduler-v1",
  "meta": {
    "templateCredsSetupCompleted": false,
    "instanceId": "bcs-debt-collection-bot"
  },
  "id": "BCS_Call_Scheduler",
  "tags": ["BCS", "Debt Collection", "Vapi"]
}
